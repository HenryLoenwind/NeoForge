--- a/net/minecraft/locale/Language.java
+++ b/net/minecraft/locale/Language.java
@@ -37,10 +_,17 @@
         Builder<String, String> builder = ImmutableMap.builder();
         BiConsumer<String, String> biconsumer = builder::put;
         parseTranslations(biconsumer, "/assets/minecraft/lang/en_us.json");
-        final Map<String, String> map = builder.build();
+        final Map<String, String> map = new java.util.HashMap<>(builder.build());
+        net.neoforged.neoforge.server.LanguageHook.captureLanguageMap(map);
         return new Language() {
             @Override
             public String getOrDefault(String p_128127_, String p_265421_) {
+                return net.neoforged.neoforge.common.text.TemplateParser.stripTemplate(p_128127_, getOrDefaultRaw(p_128127_, p_265421_));
+            }
+
+            @Override
+            @org.jetbrains.annotations.ApiStatus.Internal
+            public String getOrDefaultRaw(String p_128127_, String p_265421_) {
                 return map.getOrDefault(p_128127_, p_265421_);
             }
 
@@ -64,6 +_,11 @@
                         )
                         .isPresent();
             }
+
+            @Override
+            public Map<String, String> getLanguageData() {
+                return map;
+            }
         };
     }
 
@@ -79,6 +_,11 @@
         JsonObject jsonobject = GSON.fromJson(new InputStreamReader(p_128109_, StandardCharsets.UTF_8), JsonObject.class);
 
         for (Entry<String, JsonElement> entry : jsonobject.entrySet()) {
+            if (entry.getValue().isJsonArray()) {
+                p_128110_.accept(entry.getKey(), net.neoforged.neoforge.common.text.JsonTemplateParser.reencodeJson(entry.getValue()));
+                continue;
+            }
+
             String s = UNSUPPORTED_FORMAT_PATTERN.matcher(GsonHelper.convertToString(entry.getValue(), entry.getKey())).replaceAll("%$1s");
             p_128110_.accept(entry.getKey(), s);
         }
@@ -92,11 +_,20 @@
         instance = p_128115_;
     }
 
+    // Neo: All helpers methods below are injected by Neo to ease modder's usage of Language
+    public Map<String, String> getLanguageData() { return ImmutableMap.of(); }
+
     public String getOrDefault(String p_128111_) {
         return this.getOrDefault(p_128111_, p_128111_);
     }
 
     public abstract String getOrDefault(String p_265702_, String p_265599_);
+
+    // Neo: Bypass for the formatter
+    @org.jetbrains.annotations.ApiStatus.Internal
+    public String getOrDefaultRaw(String p_265702_, String p_265599_) {
+        return getOrDefault(p_265702_, p_265599_);
+    }
 
     public abstract boolean has(String p_128117_);
 
